ЁЯУЦ Day 4: Inheritance & Composition in JavaScript OOP
ЁЯФ╣ 1. Inheritance (ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░)

Inheritance рж╣рж▓рзЛ OOP ржПрж░ ржПржХржЯрж╛ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржзрж╛рж░ржгрж╛ ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ (Child) ржЖрж░рзЗржХржЯрж┐ ржХрзНрж▓рж╛рж╕ (Parent) ржПрж░ property ржУ method ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░ рж╕рзВрждрзНрж░рзЗ ржкрж╛рзЯред

ЁЯСЙ рж╕рж╣ржЬржнрж╛ржмрзЗ:

ржпржжрж┐ ржмрж▓рж╛ ржпрж╛рзЯ тЖТ тАЬDog is an AnimalтАЭ тЖТ ржПржЦрж╛ржирзЗ Inheritance рж╣ржмрзЗред

Child Class parent ржПрж░ behavior override ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржмрж╛ ржирждрзБржи behavior ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

Example:
class Animal {
  constructor(name) {
    this.name = name;
  }
  sound() {
    return `${this.name} makes a sound`;
  }
}

class Dog extends Animal {
  sound() {
    return `${this.name} barks: Woof!`;
  }
}

const dog = new Dog("Tommy");
console.log(dog.sound()); // Tommy barks: Woof!


тЬЕ ржПржЦрж╛ржирзЗ Dog рж╣рж▓рзЛ Animal ржПрж░ ржмрж┐рж╢рзЗрж╖ рж░рзВржкред

ЁЯФ╣ 2. super Keyword

super() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ тЖТ

Parent ржПрж░ constructor ржХрж▓ ржХрж░рждрзЗред

Parent ржПрж░ method access ржХрж░рждрзЗред

class Parent {
  greet() {
    return "Hello from Parent";
  }
}

class Child extends Parent {
  greet() {
    return super.greet() + " and Hello from Child";
  }
}

const child = new Child();
console.log(child.greet());
// Hello from Parent and Hello from Child

ЁЯФ╣ 3. Composition (has-a relationship)

Inheritance ржПрж░ ржкрж╛рж╢рж╛ржкрж╛рж╢рж┐ OOP ржП Composition ржУ ржЦрзБржм ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред
ржПржЦрж╛ржирзЗ ржПржХржЯрж┐ class ржПрж░ ржоржзрзНржпрзЗ ржЕржирзНржп class object рж╣рж┐рж╕рзЗржмрзЗ ржерж╛ржХрзЗред

ЁЯСЙ рж╕рж╣ржЬржнрж╛ржмрзЗ:

ржпржжрж┐ ржмрж▓рж╛ ржпрж╛рзЯ тЖТ тАЬCar has an EngineтАЭ тЖТ ржПржЯрж╛ Compositionред

Example:
class Engine {
  start() {
    return "Engine started!";
  }
}

class Car {
  constructor(brand) {
    this.brand = brand;
    this.engine = new Engine(); // has-a relationship
  }
  drive() {
    return `${this.brand} is driving. ${this.engine.start()}`;
  }
}

const car = new Car("BMW");
console.log(car.drive());
// BMW is driving. Engine started!

ЁЯФ╣ 4. Inheritance ржмржирж╛ржо Composition
ржмрж┐рж╖рзЯ	Inheritance (is-a)	Composition (has-a)
рж╕ржорзНржкрж░рзНржХ	Child is a Parent	One class has a another class
Example	Dog is an Animal	Car has an Engine
Reuse	Parent ржПрж░ рж╕ржм method ржкрж╛ржмрзЗ	ржЕржирзНржп object ржХрзЗ inject ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ
Flexibility	ржХржо (ржПржХржЯрж╛ ржорж╛рждрзНрж░ parent extend ржХрж░рж╛ ржпрж╛рзЯ)	ржмрзЗрж╢рж┐ (multiple objects use ржХрж░рж╛ ржпрж╛рзЯ)
ржХржЦржи ржмрзНржпржмрж╣рж╛рж░	Child рж╕рждрзНржпрж┐ржЗ Parent ржПрж░ ржмрж┐рж╢рзЗрж╖ ржзрж░ржи рж╣рж▓рзЗ	Child рж╢рзБржзрзБ ржЕржирзНржп class ржПрж░ feature ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ
ЁЯФ╣ 5. Benefits of Inheritance

Code Reusability тЖТ ржПржХржмрж╛рж░ рж▓рзЗржЦрж╛ ржХрзЛржб ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯред

Extensibility тЖТ ржирждрзБржи feature рж╕рж╣ржЬрзЗ ржпрзЛржЧ ржХрж░рж╛ ржпрж╛рзЯред

Maintainability тЖТ bug fix ржХрж░рж▓рзЗ рж╕ржм child ржП ржХрж╛ржЬ ржХрж░рзЗред

ЁЯФ╣ 6. Problems of Overusing Inheritance

ржЦрзБржм ржмрзЗрж╢рж┐ inheritance ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржХрзЛржб ржЬржЯрж┐рж▓ рж╣рзЯрзЗ ржпрж╛рзЯред

рж╕ржмрж╕ржорзЯ parent-child рж╕ржорзНржкрж░рзНржХ ржерж╛ржХрзЗ ржирж╛, ржЕржирзЗржХ рж╕ржорзЯ composition ржмрзЗрж╢рж┐ natural рж╣рзЯред

рждрж╛ржЗ rule of thumb:

ржпржжрж┐ X is a Y тЖТ Inheritance

ржпржжрж┐ X has a Y тЖТ Composition

ЁЯОп Final Example (Mix of Inheritance + Composition)
// Inheritance
class Character {
  constructor(name, health) {
    this.name = name;
    this.health = health;
  }
}

class Warrior extends Character {
  attack() {
    return `${this.name} slashes with a sword!`;
  }
}

// Composition
class Sword {
  use() {
    return "slashes with a sword!";
  }
}

class Fighter {
  constructor(name, weapon) {
    this.name = name;
    this.weapon = weapon;
  }
  attack() {
    return `${this.name} ${this.weapon.use()}`;
  }
}

const warrior = new Warrior("Aragorn", 100);
console.log(warrior.attack()); // Inheritance

const fighter = new Fighter("Leonidas", new Sword());
console.log(fighter.attack()); // Composition

ЁЯУМ рж╕рж╛рж░рж╛ржВрж╢

Inheritance ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ ржпржЦржи child рж╕рждрзНржпрж┐ржЗ parent ржПрж░ ржмрж┐рж╢рзЗрж╖ ржзрж░ржиред

Composition ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ ржпржЦржи child рж╢рзБржзрзБ ржЕржирзНржп class ржПрж░ feature ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

Inheritance = is-a relationship

Composition = has-a relationship