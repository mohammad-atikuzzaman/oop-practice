ЁЯУЦ Day 3 тАУ OOP in JavaScript (Class, Object, Method, Static)
1. Class & Object

Class рж╣рж▓рзЛ blueprint ржмрж╛ design (ржпрзЗржоржи ржПржХржЯрж╛ ржЧрж╛ржбрж╝рж┐рж░ ржиржХрж╢рж╛)ред

Object рж╣рж▓рзЛ ржУржЗ blueprint ржерзЗржХрзЗ рждрзИрж░рж┐ ржмрж╛рж╕рзНрждржм ржЬрж┐ржирж┐рж╕ (ржпрзЗржоржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЧрж╛ржбрж╝рж┐)ред

ЁЯСЙ Example:

class BankAccount {
  constructor(ownerName, balance = 0) {
    this.ownerName = ownerName;
    this.balance = balance;
  }
}

const akash = new BankAccount("Akash", 100);
const rina = new BankAccount("Rina", 200);

2. Constructor

constructor рж╣рж▓рзЛ special method, object ржмрж╛ржирж╛ржирзЛрж░ рж╕ржоржпрж╝ automatically call рж╣ржпрж╝ред

ржПржЦрж╛ржирзЗ object ржПрж░ initial state (property values) set ржХрж░рж╛ рж╣ржпрж╝ред

ЁЯСЙ Best practice: constructor ржП default values set ржХрж░рж╛ ржЙржЪрж┐ржд, ржпрж╛рждрзЗ ржнрзБрж▓ input ржП error ржХржо рж╣ржпрж╝ред

3. Instance Methods

Class ржПрж░ ржнрзЗрждрж░рзЗ ржпрзЗ methods рж▓рзЗржЦрж╛ рж╣ржпрж╝ тЖТ object ржмрж╛ржирж╛рж▓рзЗ ржУржЗ methods ржУржЗ object ржПрж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗред

ржПржЧрзБрж▓рзЛржХрзЗ ржмрж▓рж╛ рж╣ржпрж╝ instance methodsред

ЁЯСЙ Example:

deposit(amount) {
  this.balance += amount;  // instance property update
}


ЁЯСЙ ржПржЦрж╛ржирзЗ this current object ржХрзЗ ржмрзЛржЭрж╛ржЪрзНржЫрзЗред

4. this ржПрж░ Behavior

this рж╕ржмрж╕ржоржпрж╝ current object ржХрзЗ refer ржХрж░рзЗред

рждржмрзЗ method destructure ржХрж░рж▓рзЗ this рж╣рж╛рж░рж┐ржпрж╝рзЗ ржпрж╛ржпрж╝ред

ржПржЬржирзНржп .call(), .apply(), ржмрж╛ .bind() ржжрж┐ржпрж╝рзЗ explicitly this рж╕рзЗржЯ ржХрж░рждрзЗ рж╣ржпрж╝ред

ЁЯСЙ Example:

const { deposit } = akash;
deposit(50); // тЭМ this рж╣рж╛рж░рж╛ржмрзЗ
deposit.call(akash, 50); // тЬЕ ржарж┐ржХржорждрзЛ ржХрж╛ржЬ ржХрж░ржмрзЗ

5. State Update vs Return Value

рж╢рзБржзрзБ return ржХрж░рж▓рзЗ object ржПрж░ ржнрж┐рждрж░рзЗрж░ property change рж╣ржпрж╝ ржирж╛ред

рж╕ржмрж╕ржоржпрж╝ object ржПрж░ state update ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ this.property modify ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯСЙ Wrong:

deposit(amount) {
  return this.balance + amount; // рж╢рзБржзрзБ рж╣рж┐рж╕рж╛ржм ржХрж░ржЫрзЗ
}


ЁЯСЙ Correct:

deposit(amount) {
  this.balance += amount; // state update рж╣ржЪрзНржЫрзЗ
}

6. Validation (Best Practice)

рж╕ржмрж╕ржоржпрж╝ validation ржпрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗ, ржпрзЗржоржи:

Negative deposit reject ржХрж░рж╛

Withdraw ржХрж░рж▓рзЗ balance sufficient ржЖржЫрзЗ ржХрж┐ржирж╛ check ржХрж░рж╛

ЁЯСЙ Example:

withdraw(amount) {
  if (amount > this.balance) {
    console.log("тЭМ Insufficient balance!");
    return;
  }
  this.balance -= amount;
}

7. Static Methods

Static method object ржПрж░ ржирж╛, class ржПрж░ propertyред

ржПржЧрзБрж▓рзЛ object ржмрж╛ржирж╛ржирзЛ ржЫрж╛ржбрж╝рж╛ржЗ class ржирж╛ржо ржжрж┐ржпрж╝рзЗ access ржХрж░рж╛ ржпрж╛ржпрж╝ред

Use case: ржпржЦржи ржХрж╛ржЬржЯрж╛ ржкрзБрж░рзЛ class ржПрж░ responsibility, ржХрзЛржирзЛ ржПржХржХ object ржПрж░ ржирж╛ред

ЁЯСЙ Example:

static totalBalance(accounts) {
  return accounts.reduce((sum, acc) => sum + acc.balance, 0);
}

console.log(BankAccount.totalBalance([akash, rina])); // тЬЕ ржХрж╛ржЬ ржХрж░ржмрзЗ


ЁЯСЙ Best Practice:

Utility / Helper functions class ржПрж░ ржоржзрзНржпрзЗ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп static ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред

ржХржЦржирзЛ object-specific ржХрж╛ржЬ static ржП ржХрзЛрж░рзЛ ржирж╛ред

8. Memory Efficiency

Instance methods тЖТ ржкрзНрж░рждрж┐ржЯрж┐ object ржПрж░ рж╕рж╛ржерзЗ copy рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ред

Static methods тЖТ ржПржХржмрж╛рж░ржЗ ржерж╛ржХрзЗ, class ржПрж░ рж╕рж╛ржерзЗред

ржПржЬржирзНржп unnecessary method instance ржП рж░рж╛ржЦрж╛ ржЙржЪрж┐ржд ржиржпрж╝ред

9. Summary тАУ Day 3 Learning

Class = blueprint

Object = ржмрж╛рж╕рзНрждржм instance

Constructor = initial setup

Instance Method = object-specific ржХрж╛ржЬ

Static Method = class-level ржХрж╛ржЬ (no this)

this тЖТ object ржХрзЗ refer ржХрж░рзЗ, рждржмрзЗ destructure ржХрж░рж▓рзЗ call/apply/bind ржжрж░ржХрж╛рж░

Best Practice тЖТ state update ржХрж░рзЛ, validation ржпрзЛржЧ ржХрж░рзЛ, static рж╢рзБржзрзБ class responsibility ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ

ЁЯОп Day 3 Practice Idea

BankAccount ржПрж░ multiple accounts ржмрж╛ржирж╛ржУред

Withdraw / deposit ржП validation implement ржХрж░рзЛред

Static method ржжрж┐ржпрж╝рзЗ рж╕ржм account ржПрж░ ржорзЛржЯ balance ржмрзЗрж░ ржХрж░рзЛред

Destructuring ржХрж░рж▓рзЗ call/apply/bind ржжрж┐ржпрж╝рзЗ handle ржХрж░рзЛред

ЁЯСЙ ржПржЗ theory ржЯрж╛ рждрзБржорж┐ ржмрж╛рж░ржмрж╛рж░ ржкрзЬрж▓рзЗ OOP ржПрж░ base concept clear рж╣рзЯрзЗ ржпрж╛ржмрзЗред