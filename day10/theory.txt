ЁЯза Day 10 тАУ Dependency Injection (DI) & Loose Coupling: The Heart of Scalable OOP Design
ЁЯПЧя╕П ржкрзНрж░ржержорзЗ ржмрзБржЭрзЗ ржирж┐ржЗ тАУ тАЬDependencyтАЭ ржорж╛ржирзЗ ржЖрж╕рж▓рзЗ ржХрзА?

ржкрзНрж░рждрзНржпрзЗржХржЯрж╛ class рждрж╛рж░ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржЕржирзЗржХ рж╕ржорзЯ ржЕржирзНржп class-ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗред
ржПржЗ ржирж┐рж░рзНржнрж░рж╢рзАрж▓рждрж╛ржХрзЗржЗ ржмрж▓рзЗ dependencyред

ржЙржжрж╛рж╣рж░ржг:

class EmailService {
  sendEmail(message) {
    console.log("Email sent:", message);
  }
}

class UserService {
  constructor() {
    this.emailService = new EmailService(); // dependency
  }

  registerUser(name) {
    console.log(`${name} registered successfully.`);
    this.emailService.sendEmail("Welcome!");
  }
}


ржПржЦрж╛ржирзЗ UserService ржХрзНрж▓рж╛рж╕ржЯрж╛ EmailService-ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░рж╢рзАрж▓ред
рждрж╛рж╣рж▓рзЗ EmailService рж╣ржЪрзНржЫрзЗ ржПржХржЯрж╛ dependencyред

ЁЯЪи рж╕ржорж╕рзНржпрж╛ ржХрзЛржерж╛рзЯ?

ржПржЗ ржХрзЛржбрзЗ ржПржХржЯрж╛ ржмрзЬ рж╕ржорж╕рзНржпрж╛ ржЖржЫрзЗ тАУ
UserService ржирж┐ржЬрзЗржЗ EmailService рждрзИрж░рж┐ ржХрж░ржЫрзЗ (new EmailService()).

ржПрж░ ржлрж▓рзЗ:

ЁЯФЧ ржжрзБржЗржЯрж╛ class tight coupling рж╣рзЯрзЗ ржЧрзЗржЫрзЗред

ЁЯЪл ржпржжрж┐ Email ржмрж╛ржж ржжрж┐рзЯрзЗ SMS ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржкрзБрж░рзЛ class ржмржжрж▓рж╛рждрзЗ рж╣ржмрзЗред

тЭМ Test ржХрж░рж╛ржУ ржХржарж┐ржи, ржХрж╛рж░ржг dependency ржмржжрж▓рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛ред

ЁЯТб рж╕ржорж╛ржзрж╛ржи: Dependency Injection (DI)

тАЬDependency InjectionтАЭ ржорж╛ржирзЗ тАФ
class-ржПрж░ ржнрзЗрждрж░ dependency рждрзИрж░рж┐ ржирж╛ ржХрж░рзЗ, ржмрж╛ржЗрж░ ржерзЗржХрзЗ inject ржХрж░рж╛ред

ржорж╛ржирзЗ dependency ржХрзЗ constructor, parameter, ржмрж╛ setter method ржжрж┐рзЯрзЗ ржкрж╛ржарж┐рзЯрзЗ ржжрзЗржУрзЯрж╛ рж╣рзЯред

ЁЯзй Example: Proper Dependency Injection
class EmailService {
  send(message) {
    console.log("Email:", message);
  }
}

class SMSService {
  send(message) {
    console.log("SMS:", message);
  }
}

class UserService {
  constructor(notificationService) {
    this.notificationService = notificationService; // Injected dependency
  }

  registerUser(name) {
    console.log(`${name} registered successfully.`);
    this.notificationService.send("Welcome to our app!");
  }
}

// Inject dependency dynamically
const emailService = new EmailService();
const smsService = new SMSService();

const user1 = new UserService(emailService);
user1.registerUser("Atik");

const user2 = new UserService(smsService);
user2.registerUser("Rahim");

тЬЕ ржПржЦрж╛ржирзЗ ржпрж╛ рж╣рж▓рзЛ:

UserService ржирж┐ржЬрзЗ dependency рждрзИрж░рж┐ ржХрж░ржЫрзЗ ржирж╛ред

Dependency constructor ржжрж┐рзЯрзЗ ржмрж╛ржЗрж░рзЗ ржерзЗржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред

ржПржЦржи рждрзБржорж┐ ржпрзЗржХрзЛржирзЛ service inject ржХрж░рждрзЗ ржкрж╛рж░рзЛ (Email, SMS, Push, ржЗрждрзНржпрж╛ржжрж┐)ред

ржХрзНрж▓рж╛рж╕ржЧрзБрж▓рзЛ ржПржХрзЗ ржЕржкрж░рзЗрж░ ржерзЗржХрзЗ independent (loosely coupled)ред

ЁЯз▒ Loose Coupling ржорж╛ржирзЗ ржХрзА?

Tight Coupling:
ржПржХржЯрж╛ class ржпржжрж┐ ржЕржирзНржп class-ржПрж░ implementation directly ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

Loose Coupling:
ржПржХржЯрж╛ class ржЕржирзНржп class-ржПрж░ behavior ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ, implementation ржПрж░ ржЙржкрж░ ржирзЯред

ЁЯСЙ Real-world analogy:

ржзрж░рзЛ рждрзБржорж┐ рж░рзЗрж╕рзНржЯрзБрж░рзЗржирзНржЯрзЗ ржЧрзЗржЫрзЛред
рждрзБржорж┐ waiter ржХрзЗ ржмрж▓рзЛ тАЬржПржХ ржЧрзНрж▓рж╛рж╕ ржкрж╛ржирж┐ ржжрж╛ржУредтАЭ
рждрзБржорж┐ ржмрж▓рзЛ ржирж╛, тАЬржлрж┐рж▓рзНржЯрж╛рж░ ржерзЗржХрзЗ ржкрж╛ржирж┐ ржврзЗрж▓рзЗ ржЧрзНрж▓рж╛рж╕рзЗ ржжрж╛ржУредтАЭ

рждрзБржорж┐ behavior ржЪрж╛ржУ (ржкрж╛ржирж┐ ржкрж╛ржУрзЯрж╛), implementation ржирж╛ (ржХрзАржнрж╛ржмрзЗ ржЖржирж╛ рж╣ржмрзЗ)ред
ржПржЯрж╛ржЗ loose coupling! ЁЯШД

ЁЯза ржХрзЗржи Dependency Injection ржжрж░ржХрж╛рж░?

Scalability: ржирждрзБржи service ржпрзЛржЧ ржХрж░рж▓рзЗржУ ржкрзБрж░рзЛржирзЛ ржХрзЛржбрзЗ рж╣рж╛ржд ржжрж┐рждрзЗ рж╣рзЯ ржирж╛ред

Testability: рж╕рж╣ржЬрзЗ mock dependency рждрзИрж░рж┐ ржХрж░рзЗ test ржХрж░рж╛ ржпрж╛рзЯред

Flexibility: ржПржХ dependency ржмрж╛ржж ржжрж┐рзЯрзЗ ржЖрж░рзЗржХржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯред

Maintenance: ржХрзЛржб ржкрж░рж┐рж╖рзНржХрж╛рж░, рж╕рж╣ржЬ, ржПржмржВ ржнржмрж┐рж╖рзНржпрждрзЗ update-friendly рж╣рзЯред

тЪЩя╕П Dependency Injection-ржПрж░ 3 ржзрж░ржг

Constructor Injection тЖТ рж╕ржмржЪрзЗрзЯрзЗ рж╕рж╛ржзрж╛рж░ржг

constructor(service) { this.service = service; }


Setter Injection тЖТ ржкрж░рзЗ dependency set ржХрж░рж╛ рж╣рзЯ

setService(service) { this.service = service; }


Method Injection тЖТ ржорзЗржержбрзЗрж░ parameter рж╣рж┐рж╕рзЗржмрзЗ dependency ржкрж╛ржарж╛ржирзЛ рж╣рзЯ

processOrder(service) { service.send("Order complete"); }

тЪая╕П ржнрзБрж▓ржЧрзБрж▓рзЛ ржпрзЗржЧрзБрж▓рзЛ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛

тЭМ Dependency ржнрж┐рждрж░рзЗ рждрзИрж░рж┐ ржХрж░рж╛ (new EmailService() ржЗрждрзНржпрж╛ржжрж┐)ред
тЭМ ржПржХржЗ class ржП ржЕржирзЗржХ dependency inject ржХрж░рж╛ (SRP ржнрж╛ржЩрзЗ)ред
тЭМ Interface ржмрж╛ abstraction ржЫрж╛рзЬрж╛ direct dependency inject ржХрж░рж╛ред
тЭМ Dependency validate ржирж╛ ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ред

тЬЕ Best Practices

ЁЯзй рж╕ржмрж╕ржорзЯ abstraction/interface ржПрж░ ржЙржкрж░ dependency рж░рж╛ржЦрзЛ, implementation ржПрж░ ржЙржкрж░ ржирж╛ред

ЁЯТм Class design ржПржоржи ржХрж░рзЛ ржпрж╛рждрзЗ dependency ржмржжрж▓рж╛ржирзЛ ржпрж╛рзЯ ржХрж┐ржирзНрждрзБ class logic ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХрзЗред

ЁЯзк Unit test ржХрж░рж╛рж░ рж╕ржорзЯ dependency mock ржХрж░рзЛред

ЁЯз▒ Dependency ржпржд ржХржо, code рждржд maintainableред

ЁЯза Real-life Example: Notification System

(Practice ржХрж░рж╛рж░ рж╕ржорзЯ ржПржЯрж╛ржХрзЗ follow ржХрж░ржмрзЗ ЁЯСЗ)

// Interface-like structure
class NotificationService {
  send(message) {
    throw new Error("Method 'send()' must be implemented");
  }
}

class EmailService extends NotificationService {
  send(message) {
    console.log("ЁЯУз Email Sent:", message);
  }
}

class SMSService extends NotificationService {
  send(message) {
    console.log("ЁЯУ▒ SMS Sent:", message);
  }
}

class PushService extends NotificationService {
  send(message) {
    console.log("ЁЯФФ Push Notification:", message);
  }
}

class UserNotification {
  constructor(service) {
    this.service = service; // Dependency injected
  }

  notifyUser(name) {
    this.service.send(`Welcome ${name}!`);
  }
}

// Inject dynamically
const email = new EmailService();
const sms = new SMSService();
const push = new PushService();

new UserNotification(email).notifyUser("Atik");
new UserNotification(sms).notifyUser("Rahim");
new UserNotification(push).notifyUser("Sakib");

ЁЯзй Homework (Day 10)

ЁЯСЙ рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ Payment Gateway System ржмрж╛ржирж╛рждрзЗ рж╣ржмрзЗред

Requirements:

ржПржХржЯрж╛ base PaymentService class ржмрж╛ржирж╛ржУ (ржпрж╛рждрзЗ ржПржХржЯрж╛ pay(amount) ржорзЗржержб ржерж╛ржХржмрзЗ)ред

рждрж┐ржиржЯрж╛ service ржмрж╛ржирж╛ржУ тАФ BkashService, NagadService, StripeServiceред

ржПржХржЯрж╛ PaymentProcessor class ржмрж╛ржирж╛ржУ ржпрзЗржЯрж╛ constructor ржжрж┐рзЯрзЗ dependency ржирзЗржмрзЗред

ржкрзНрж░рждрзНржпрзЗржХржЯрж╛ service ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ inject ржХрж░рзЗ payment complete ржХрж░ржмрзЗред

Bonus:
ржирждрзБржи PayPalService ржпрзЛржЧ ржХрж░рзЛ тАФ ржХрж┐ржирзНрждрзБ ржкрзБрж░рзЛржирзЛ ржХрзЛржбрзЗ ржХрзЛржирзЛ рж▓рж╛ржЗржи ржмржжрж▓рж╛ржмрзЗ ржирж╛ ЁЯШО
(ржПржЯрж╛ржЗ prove ржХрж░ржмрзЗ рждрзБржорж┐ loosely coupled DI рж╕рж┐рж╕рзНржЯрзЗржо ржмрж╛ржирж┐рзЯрзЗржЫрзЛред)