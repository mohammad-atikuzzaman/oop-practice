üß± Interface & Contracts in OOP ‚Äì ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ Theory
1Ô∏è‚É£ Interface ‡¶ï‡¶ø?

Interface ‡¶π‡¶≤ ‡¶è‡¶ï‡¶ü‡¶ø contract ‡¶¨‡¶æ ‡¶ö‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶Ø‡¶æ ‡¶¨‡¶≤‡ßá ‡¶¶‡ßá‡ßü:

"‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§"

‡¶è‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤‡¶§ class ‡¶è‡¶¨‡¶Ç system ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø agreement‡•§

Interface ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ï‡ßã‡¶®‡ßã functionality implement ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ; ‡¶∂‡ßÅ‡¶ß‡ßÅ structure ‡¶¨‡¶æ behavior ‡¶è‡¶∞ ‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§

‡¶Æ‡ßÇ‡¶≤ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ:

Interface ‡¶è‡¶ï‡¶ü‡¶ø guideline ‡¶Ø‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá, system ‡¶è ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã class ‡¶è‡¶ï‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ behavior follow ‡¶ï‡¶∞‡¶¨‡ßá‡•§

Different class ‡¶≠‡¶ø‡¶®‡ßç‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ï‡¶á method signature ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

2Ô∏è‚É£ Interface ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶ï‡ßá‡¶®?
2.1 Consistency (‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø)

‡¶∏‡¶¨ class ‡¶è‡¶ï‡¶á structure ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Payment system ‡¶è PayPal, Stripe, Bkash ‚Äì ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ connect(), pay(amount), disconnect() ‡¶•‡¶æ‡¶ï‡ßá‡•§

2.2 Scalability (‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ)

‡¶®‡¶§‡ßÅ‡¶® class add ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶π‡¶ú‡•§

Main system ‡¶ï‡ßá change ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü ‡¶®‡¶æ‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: Telegram add ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶§‡ßÅ‡¶® class implement ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, system ‡¶†‡¶ø‡¶ï ‡¶è‡¶ï‡¶á‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§

2.3 Decoupling (‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶™‡¶≤‡¶ø‡¶Ç)

System ‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ö‡¶æ‡¶ì method ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ‡•§

‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü ‡¶®‡¶æ‡•§

2.4 Team Collaboration (‡¶¶‡¶≤‡¶ó‡¶§ ‡¶ï‡¶æ‡¶ú)

Multiple developer ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶≤‡ßá Interface ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶∏‡¶¨‡¶æ‡¶∞ code ‡¶è‡¶ï‡¶á contract ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

3Ô∏è‚É£ Interface ‡¶è‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø

Structure only: ‡¶ï‡ßã‡¶® logic ‡¶¨‡¶æ implementation ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ‡•§

Method signatures: ‡¶ï‡ßã‡¶® ‡¶Æ‡ßá‡¶•‡¶° ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶§‡¶æ define ‡¶ï‡¶∞‡ßá‡•§

Polymorphism support: ‡¶è‡¶ï‡¶á method ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≠‡¶ø‡¶®‡ßç‡¶® behavior implement ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

Validation: Class interface ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ check ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

4Ô∏è‚É£ JavaScript ‡¶è Interface

JS ‡¶è ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø interface keyword ‡¶®‡ßá‡¶á‡•§

‡¶§‡¶¨‡ßá function ‡¶¨‡¶æ class utility ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá interface implement ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
function Interface(obj, methods) {
  const missingMethods = [];
  for (let method of methods) {
    if (typeof obj[method] !== "function") {
      missingMethods.push(method);
    }
  }
  if (missingMethods.length > 0) {
    throw new Error(`Class ${obj.constructor.name} must implement method(s): ${missingMethods.join(", ")}`);
  } else {
    console.log(`‚úÖ ${obj.constructor.name} passed the interface check!`);
  }
}

5Ô∏è‚É£ Real-Life ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
Payment System:
class PayPal {
  connect() { console.log("Connected to PayPal"); }
  pay(amount) { console.log(`Paid $${amount} via PayPal`); }
  disconnect() { console.log("Disconnected from PayPal"); }
}

class Stripe {
  connect() { console.log("Connected to Stripe"); }
  pay(amount) { console.log(`Paid $${amount} via Stripe`); }
  disconnect() { console.log("Disconnected from Stripe"); }
}

const requiredMethods = ["connect", "pay", "disconnect"];
Interface(new PayPal(), requiredMethods);
Interface(new Stripe(), requiredMethods);


‚úÖ ‡¶∏‡¶¨ method ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá pass message ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§
‚ùå method missing ‡¶π‡¶≤‡ßá error throw ‡¶π‡¶¨‡ßá‡•§

6Ô∏è‚É£ Interface ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ

Consistency: ‡¶∏‡¶¨ class ‡¶è‡¶ï‡¶á behavior follow ‡¶ï‡¶∞‡ßá‡•§

Scalability: ‡¶®‡¶§‡ßÅ‡¶® platform/system add ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶π‡¶ú‡•§

Decoupling: System ‡¶∂‡ßÅ‡¶ß‡ßÅ interface ‡¶ö‡¶æ‡ßü, implementation ‡¶®‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§

Polymorphism: ‡¶è‡¶ï‡¶á method ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

Team work friendly: ‡¶∏‡¶¨ developer interface follow ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

7Ô∏è‚É£ Best Practices

Small & focused interface: Single Responsibility principle ‡¶Æ‡¶æ‡¶®‡ßã‡•§

Validate interface during development: ‡¶≠‡ßÅ‡¶≤ implementation catch ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§

Use interface only when multiple class share behavior: Unnecessary interface avoid ‡¶ï‡¶∞‡ßã‡•§

8Ô∏è‚É£ Common Mistakes

‚ùå ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï responsibility ‡¶è‡¶ï interface ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶æ
‚ùå Class ‡¶ö‡ßá‡¶ï ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá contract follow ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
‚ùå Interface ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá inheritance ‡¶¨‡¶æ composition ‡¶∏‡¶π‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶¨‡ßá

9Ô∏è‚É£ Homework Idea

Messaging System Interface:

Interface define:

connect()

sendMessage(msg)

disconnect()

Classes: WhatsApp, Messenger, Telegram (‡¶≠‡¶ø‡¶®‡ßç‡¶®‡¶≠‡¶æ‡¶¨‡ßá implement ‡¶ï‡¶∞‡¶¨‡ßá)

Interface check ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá validate ‡¶ï‡¶∞‡ßã‡•§

System scalable: ‡¶®‡¶§‡ßÅ‡¶® messaging platform add ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá main code change ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§

üîë Key Takeaway:

Interface = Contract

Structure ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá

Implementation ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

System scalable, consistent ‡¶è‡¶¨‡¶Ç team-friendly ‡¶π‡¶Ø‡¶º