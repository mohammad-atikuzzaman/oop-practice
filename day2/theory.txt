ЁЯЧУя╕П Day 2: Constructor Function (In-depth)
ЁЯОп Goal:

#Constructor Function ржХрзА?

#ржХрзЗржи ржжрж░ржХрж╛рж░?

#ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ new keyword ржПрж░ рж╕рж╛ржерзЗред

#Best practices & pitfalls.



ЁЯУЦ Theory (Step by Step)



ЁЯФ╣ Constructor Function ржХрзА?

Constructor Function рж╣рж▓рзЛ ржПржХржЯрж╛ special function ржпрзЗржЯрж╛ ржжрж┐рзЯрзЗ multiple similar object ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯред

Convention: function ржПрж░ ржирж╛ржо Capital Letter ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣рзЯ (PascalCase)ред

Example:

function User(name, email) {
  this.name = name;
  this.email = email;
}



ЁЯФ╣ ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ new keyword?

ржпржЦржи рждрзБржорж┐ new User("Atik", "atik@example.com") рж▓рж┐ржЦржмрзЗ:

JS internally ржПржХржЯрж╛ ржЦрж╛рж▓рж┐ object ржмрж╛ржирж╛ржмрзЗ {}

ржУржЗ object ржХрзЗ this ржП bind ржХрж░ржмрзЗ

Function body execute ржХрж░ржмрзЗ тЖТ property ржЧрзБрж▓рзЛ this ржП assign рж╣ржмрзЗ

this ржХрзЗ return ржХрж░ржмрзЗ




ЁЯФ╣ ржХрзЗржи ржжрж░ржХрж╛рж░?

ржпржжрж┐ рждрзЛржорж╛ржХрзЗ ржЕржирзЗржХржЧрзБрж▓рзЛ user ржмрж╛ржирж╛рждрзЗ рж╣рзЯ, object literal ржжрж┐рзЯрзЗ ржмрж╛рж░ржмрж╛рж░ рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗред

Constructor function ржжрж┐рзЯрзЗ рж╕рж╣ржЬрзЗ template ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯред




ЁЯФ╣ Method ржпрзЛржЧ ржХрж░рж╛рж░ рзиржЯрж╛ ржЙржкрж╛рзЯ

Directly inside constructor (not efficient, ржкрзНрж░рждрж┐ржЯрж╛ instance ржирждрзБржи function copy ржкрж╛ржмрзЗ)

Prototype ржП add ржХрж░рж╛ (best practice тАУ рж╕ржм instance ржПржХржЗ function share ржХрж░рзЗ)




тЪая╕П Common Mistakes

new ржЫрж╛рзЬрж╛ call ржХрж░рж╛

function User(name) {
  this.name = name;
}
const u1 = User("Atik"); 
console.log(u1); // undefined (ржХрж╛рж░ржг return ржХрж░ржЫрзЗ ржирж╛)
console.log(globalThis.name); // "Atik" leak рж╣рзЯрзЗ ржЧрзЗрж▓ global scope ржП тЭМ



ЁЯСЙ рж╕ржмрж╕ржорзЯ new ржжрж┐рзЯрзЗ call ржХрж░рждрзЗ рж╣ржмрзЗред

Method ржнрзЗрждрж░рзЗ define ржХрж░рж╛

function User(name) {
  this.name = name;
  this.sayHi = function() { // тЭМ inefficient
    console.log(`Hi, I am ${this.name}`);
  }
}




ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж╛ user ржЖрж▓рж╛ржжрж╛ function memory ржирж┐ржмрзЗред



тЬЕ Best Practice:

function User(name) {
  this.name = name;
}
User.prototype.sayHi = function() {
  console.log(`Hi, I am ${this.name}`);
};





ЁЯЪА Best Practices Recap

Constructor function ржПрж░ ржирж╛ржо Capital letter ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзЛред

рж╕ржмрж╕ржорзЯ new ржжрж┐рзЯрзЗ instance ржмрж╛ржирж╛ржУред

Method ржЧрзБрж▓рзЛ constructor ржПрж░ ржнрзЗрждрж░ ржирж╛ рж▓рж┐ржЦрзЗ prototype ржП рж░рж╛ржЦрзЛред

ржпржжрж┐ ржЕржирзЗржХ property ржерж╛ржХрзЗ тЖТ object parameter ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред