üìñ Theory (Extended)
üîπ Object ‡¶ï‡ßÄ?

Object = data + behavior ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

property = data (value)

method = behavior (function)

Example (Real life analogy):
‡¶è‡¶ï‡¶ü‡¶æ student object:

Property: name, roll, age

Method: read(), introduce()


const student = {
  name: "Rahim",
  roll: 101,
  age: 20,
  introduce: function() {
    console.log(`Hi, I am ${this.name}, roll: ${this.roll}`);
  }
};


üîπ Why this?

this object-‡¶è‡¶∞ current context ‡¶¨‡ßã‡¶ù‡¶æ‡ßü‡•§

this.name ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶á object-‡¶è‡¶∞ name property.



‚ö†Ô∏è Common Mistakes
‚ùå Mistake 1: Arrow Function in Method
const person = {
  name: "Atik",
  introduce: () => {
    console.log(`Hi, I am ${this.name}`);
  }
};

person.introduce(); // Output: Hi, I am undefined


üëâ ‡¶ï‡ßá‡¶® ‡¶è‡¶Æ‡¶® ‡¶π‡¶≤‡ßã?

Arrow function-‡¶è‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ this ‡¶®‡ßá‡¶á‡•§

‡¶ì parent scope ‡¶•‡ßá‡¶ï‡ßá this capture ‡¶ï‡¶∞‡ßá‡•§

Object literal-‡¶è‡¶∞ method ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá arrow function ‡¶¶‡¶ø‡¶≤‡ßá, this object ‡¶ï‡ßá ‡¶®‡¶æ ‡¶™‡ßá‡ßü‡ßá global (window/undefined in strict mode) ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡ßü‡•§

‚úÖ Best Practice: Object method-‡¶è normal function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã‡•§





‚ùå Mistake 2: Destructuring Method
const person = {
  name: "Atik",
  age: 23,
  introduce: function () {
    console.log(`Hi, I am ${this.name}, ${this.age} years old`);
  }
};

const { introduce } = person;
introduce(); // Output: Hi, I am undefined, undefined years old


üëâ ‡¶ï‡ßá‡¶® undefined ‡¶Ü‡¶∏‡¶õ‡ßá?

Destructuring ‡¶ï‡¶∞‡¶≤‡ßá method ‡¶ü‡¶æ object ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü‡•§

‡¶´‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá this ‡¶Ü‡¶∞ ‡¶∏‡ßá‡¶á object-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá bound ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ‡•§

‚úÖ Best Practice: Method destructure ‡¶ï‡¶∞‡¶≤‡ßá bind ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶¨‡¶æ call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü reference ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

const { introduce } = person;
introduce.call(person); // Output ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶∏‡¶¨‡ßá







üöÄ Best Practices Recap

Method ‡¶è arrow function use ‡¶ï‡ßã‡¶∞‡ßã ‡¶®‡¶æ ‚Üí ‡¶ï‡¶æ‡¶∞‡¶£ this ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

Object ‡¶•‡ßá‡¶ï‡ßá method destructure ‡¶ï‡ßã‡¶∞‡ßã ‡¶®‡¶æ bind ‡¶õ‡¶æ‡ßú‡¶æ ‚Üí ‡¶®‡¶æ‡¶π‡¶≤‡ßá this ‡¶π‡¶æ‡¶∞‡¶æ‡¶¨‡ßá‡•§

Object method-‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü this ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã ‚Üí ‡¶Ø‡¶æ‡¶§‡ßá property access ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡ßü‡•§

Object literal ‡¶≤‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü key: value ‡¶è‡¶ï‡¶á ‡¶π‡¶≤‡ßá shorthand ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§