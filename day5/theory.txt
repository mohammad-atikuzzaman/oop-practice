ЁЯМЯ Day 5 тАУ Object Oriented Programming (OOP) in JavaScript
ЁЯзй 1. What is OOP?

OOP (Object Oriented Programming) рж╣рж▓рзЛ programming-ржПрж░ ржПржХржЯрж╛ powerful system, ржпрзЗржЦрж╛ржирзЗ code-ржХрзЗ тАЬobjectтАЭ ржЖржХрж╛рж░рзЗ ржнрж╛ржЧ ржХрж░рж╛ рж╣рзЯред
ржкрзНрж░рждрж┐ржЯрж╛ object-ржПрж░ ржирж┐ржЬрж╕рзНржм data (properties) ржПржмржВ behavior (methods) ржерж╛ржХрзЗред

ЁЯСЙ Example:

const car = {
  brand: "Toyota",
  color: "Black",
  start() {
    console.log(`${this.brand} is starting...`);
  }
};

car.start(); // Toyota is starting...


ржПржЗ car object-ржПрж░ ржоржзрзНржпрзЗ data (brand, color) ржПржмржВ behavior (start method) тАФ ржжрзБржЗржЯрж╛ржЗ ржЖржЫрзЗред
ржПржЯрж╛ржЗ рж╣рж▓рзЛ object-oriented thinkingред

ЁЯз▒ 2. Why OOP? (ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ)

OOP ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржорзВрж▓ рзкржЯрж╛ ржХрж╛рж░ржг рж╣рж▓рзЛ ЁЯСЗ

Code Reusability тАУ ржПржХржЗ code ржмрж╛рж░ржмрж╛рж░ ржирж╛ рж▓рж┐ржЦрзЗ ржкрзБржирж░рж╛ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ

Easy Maintenance тАУ ржмрзЬ project рж╕рж╣ржЬрзЗ manage ржХрж░рж╛ ржпрж╛рзЯ

Scalability тАУ ржирждрзБржи feature рж╕рж╣ржЬрзЗ ржпрзЛржЧ ржХрж░рж╛ ржпрж╛рзЯ

Clean Structure тАУ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржВрж╢рзЗрж░ ржЖрж▓рж╛ржжрж╛ responsibility ржерж╛ржХрзЗ

ЁЯза 3. Four Pillars of OOP

ржПржЦржи ржЖрж╕рж▓ ржорзНржпрж╛ржЬрж┐ржХ тЬи
OOP-ржПрж░ ржнрж┐рждрзНрждрж┐ рждрзИрж░рж┐ рж╣рзЯ ржЪрж╛рж░ржЯрж┐ ржорзВрж▓ ржзрж╛рж░ржгрж╛рж░ ржУржкрж░:

ЁЯПЧя╕П (a) Encapsulation тАУ Data protection

Encapsulation ржорж╛ржирзЗ рж╣рж▓рзЛ data ржПржмржВ behavior ржХрзЗ ржПржХрж╕рж╛ржерзЗ ржПржХржЯрж╛ unit-ржПрж░ ржоржзрзНржпрзЗ рж░рж╛ржЦрж╛,
ржПржмржВ ржмрж╛ржЗрж░рзЗрж░ ржХрзЗржЙ ржпрж╛рждрзЗ direct рж╕рзЗржЗ data ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рзЗред

ЁЯСЙ Example:

class BankAccount {
  #balance = 0; // private property

  deposit(amount) {
    this.#balance += amount;
  }

  getBalance() {
    return this.#balance;
  }
}

const acc = new BankAccount();
acc.deposit(500);
console.log(acc.getBalance()); // 500
console.log(acc.#balance); // тЭМ Error (private)


ЁЯФТ ржПржЦрж╛ржирзЗ #balance property ржмрж╛ржЗрж░рзЗ ржерзЗржХрзЗ access ржХрж░рж╛ ржпрж╛рзЯ ржирж╛ред
ржПржЯрж╛ржЗ рж╣рж▓рзЛ Encapsulation тАФ data ржХрзЗ protect ржХрж░рж╛ред

ЁЯзм (b) Inheritance тАУ Reuse Code Easily

Inheritance ржорж╛ржирзЗ, ржПржХржЯрж╛ class ржЖрж░рзЗржХржЯрж╛ class-ржПрж░ property ржУ method use ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред
ржПржЯрж╛ code reuse ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред

ЁЯСЙ Example:

class Animal {
  eat() {
    console.log("Eating...");
  }
}

class Dog extends Animal {
  bark() {
    console.log("Barking...");
  }
}

const dog = new Dog();
dog.eat(); // Eating...
dog.bark(); // Barking...


ЁЯР╢ ржПржЦрж╛ржирзЗ Dog class, Animal ржерзЗржХрзЗ property/method inherit ржХрж░рзЗржЫрзЗред

ЁЯОн (c) Polymorphism тАУ One Method, Many Forms

Polymorphism ржорж╛ржирзЗ рж╣рж▓рзЛ ржПржХржЗ method ржирж╛ржо ржнрж┐ржирзНржи ржнрж┐ржирзНржи object ржЕржирзБржпрж╛рзЯрзА ржЖрж▓рж╛ржжрж╛ ржХрж╛ржЬ ржХрж░ржмрзЗред

ЁЯСЙ Example:

class Animal {
  sound() {
    console.log("Animal sound");
  }
}

class Dog extends Animal {
  sound() {
    console.log("Woof!");
  }
}

class Cat extends Animal {
  sound() {
    console.log("Meow!");
  }
}

const animals = [new Dog(), new Cat()];
animals.forEach(a => a.sound());


Output:

Woof!
Meow!


ЁЯР╛ рж╕ржмрж╛ржЗ sound() method use ржХрж░ржЫрзЗ, ржХрж┐ржирзНрждрзБ behavior ржЖрж▓рж╛ржжрж╛ред
ржПржЯрж╛ржЗ Polymorphismред

ЁЯХ╢я╕П (d) Abstraction тАУ Hide Details, Show Essentials

Abstraction ржорж╛ржирзЗ рж╣рж▓рзЛ unnecessary details рж▓рзБржХрж┐рзЯрзЗ рж╢рзБржзрзБ ржкрзНрж░рзЯрзЛржЬржирзАрзЯржЯрж╛ ржжрзЗржЦрж╛ржирзЛред

ЁЯСЙ Example:

class Payment {
  process() {
    throw new Error("Method must be implemented by subclass");
  }
}

class CardPayment extends Payment {
  process() {
    console.log("Processing card payment...");
  }
}

new CardPayment().process();


ржПржЦрж╛ржирзЗ Payment рж╣рж▓рзЛ abstract idea,
ржЖрж░ CardPayment ржмрж╛рж╕рзНрждржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ тАФ
ржЕрж░рзНржерж╛рзО, ржЖржорж░рж╛ concept рж░рж╛ржЦржЫрж┐ abstract, ржХрж┐ржирзНрждрзБ implementation ржЖрж▓рж╛ржжрж╛ class-ржП ржХрж░ржЫрж┐ред

ЁЯз░ 4. OOP Structure Summary

ржПржХржЯрж╛ рж╕рж╛ржзрж╛рж░ржг OOP structure ржПрж░ ржорждрзЛ ржжрзЗржЦрждрзЗ рж╣рзЯ ЁЯСЗ

class Parent {
  constructor(name) {
    this.name = name;
  }
}

class Child extends Parent {
  constructor(name, age) {
    super(name);
    this.age = age;
  }

  greet() {
    console.log(`Hi, I am ${this.name}, ${this.age} years old.`);
  }
}

const person = new Child("Atik", 23);
person.greet();

ЁЯзСтАНЁЯТ╗ 5. Real Life Example

ржзрж░рж╛ ржпрж╛ржХ рждрзБржорж┐ ржПржХржЯрж╛ Payment System ржмрж╛ржирж╛ржЪрзНржЫрзЛред

рждрзБржорж┐ ржЪрж╛ржЗржЫрзЛ Cash, Card, Mobile Payment тАФ рждрж┐ржи ржзрж░ржирзЗрж░ payment ржерж╛ржХржмрзЗред
рж╕ржмржЧрзБрж▓рзЛрж░ common behavior рж╣рж▓рзЛ тАЬprocessPayment()тАЭ,
ржХрж┐ржирзНрждрзБ ржХрж╛ржЬ ржХрж░ржмрзЗ ржнрж┐ржирзНржиржнрж╛ржмрзЗред

ЁЯСЙ ржПржЗржЯрж╛ OOP ржжрж┐рзЯрзЗржЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржХрж░рж╛ ржпрж╛рзЯ тАФ ржпрзЗржоржиржЯрж╛ ржЖржорж░рж╛ ржЙржкрж░рзЗ project-ржП ржжрзЗржЦрзЗржЫрж┐ред

ЁЯзй 6. Benefits of Learning OOP

тЬЕ Clean and modular code structure
тЬЕ Reusable and scalable system
тЬЕ Makes teamwork easier
тЬЕ Easy debugging and testing
тЬЕ Professional project structure

ЁЯзн 7. Final Example Recap

ЁЯСЙ Payment тАУ Abstract class
ЁЯСЙ CardPayment, CashPayment, MobileBankingPayment тАУ Subclasses
ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж╛ subclass ржирж┐ржЬрзЗрж░ ржорждрзЛ ржХрж░рзЗ processPayment() implement ржХрж░рзЗ
ЁЯСЙ OOP-ржПрж░ ржЪрж╛рж░ржЯрж╛ pillar тАУ encapsulation, inheritance, polymorphism, abstraction тАУ ржПржХрж╕рж╛ржерзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ!

ЁЯОп In Short:
Pillar	                     Meaning	                                     Example
Encapsulation        	Data protection	                    Private variable #balance
Inheritance	             Code reuse	                   class Dog extends Animal
Polymorphism     	Same method, different behavior	         sound() in Dog & Cat
Abstraction         	Hide details             	Payment class idea only