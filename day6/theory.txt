üß† Day 6 ‚Äì Relationship Between Classes (in OOP)

OOP-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï (relationship) ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶¨‡¶ø‡¶∑‡ßü‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø‡•§
‡¶ï‡¶æ‡¶∞‡¶£ ‡¶¨‡ßú ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá connect ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

üîπ Types of Relationships
1Ô∏è‚É£ Inheritance ‚Üí (Is-A Relationship)

‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ class ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ class ‡¶•‡ßá‡¶ï‡ßá property ‡¶¨‡¶æ method inherit (‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞) ‡¶ï‡¶∞‡ßá‡•§

üëâ Example:
‚ÄúDog is a Animal‚Äù ‚Üí Dog class inherits Animal class

class Animal {
  eat() {
    console.log("Eating...");
  }
}

class Dog extends Animal {
  bark() {
    console.log("Woof! Woof!");
  }
}

const dog = new Dog();
dog.eat(); // from Animal
dog.bark(); // from Dog


‚úÖ ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá:

‡¶Ø‡¶ñ‡¶® ‡¶¶‡ßÅ‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‚Äúis-a‚Äù relationship ‡¶•‡¶æ‡¶ï‡ßá
‡¶Ø‡ßá‡¶Æ‡¶®:
Car is a Vehicle,
Teacher is a Person

üö´ ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ:

‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡¶∞ behavior ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ
(e.g. Driver ‡¶è‡¶¨‡¶Ç Car ‚Äî ‡¶è‡¶ñ‡¶æ‡¶®‡ßá driver ‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‚Äúowner‚Äù ‡¶®‡¶æ, ‡¶¨‡¶∞‡¶Ç ‚Äúuses‚Äù it)

2Ô∏è‚É£ Composition (Has-A Relationship)

Composition ‡¶Æ‡¶æ‡¶®‡ßá ‚Äî ‡¶è‡¶ï‡¶ü‡¶æ class-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø class-‡¶è‡¶∞ instance ‡¶•‡¶æ‡¶ï‡¶æ‡•§

üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‚ÄúCar has an Engine‚Äù ‚Üí Car class-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Engine class-‡¶è‡¶∞ instance ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

class Engine {
  start() {
    console.log("Engine started...");
  }
}

class Car {
  constructor(model) {
    this.model = model;
    this.engine = new Engine(); // composition
  }

  drive() {
    this.engine.start();
    console.log(`${this.model} is driving...`);
  }
}

const car = new Car("BMW");
car.drive();


‚úÖ ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá:

‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ property ‡¶¨‡¶æ method ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡ßü

‡¶Ø‡¶ñ‡¶® ‡¶¶‡ßÅ‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶≠‡¶æ‡¶¨‡ßá exist ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

üß† Best Practice:
Composition ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ inheritance ‡¶è‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡¶∂‡¶ø flexible‡•§
Inheritance tightly coupled ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü (‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ change ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡ßü problem ‡¶π‡ßü)‡•§

3Ô∏è‚É£ Aggregation (Has-A Relationship but weaker)

Aggregation ‡¶π‡¶≤‡ßã composition ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ light version‡•§
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã loosely connected ‡¶•‡¶æ‡¶ï‡ßá‡•§

üëâ Example:
‚ÄúLibrary has Books‚Äù
Library delete ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶¨‡¶á‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

class Book {
  constructor(title) {
    this.title = title;
  }
}

class Library {
  constructor(name) {
    this.name = name;
    this.books = [];
  }

  addBook(book) {
    this.books.push(book);
  }

  listBooks() {
    this.books.forEach(b => console.log(b.title));
  }
}

const book1 = new Book("JavaScript Basics");
const book2 = new Book("OOP Mastery");

const library = new Library("City Library");
library.addBook(book1);
library.addBook(book2);

library.listBooks();


‚úÖ ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá:

‡¶Ø‡¶ñ‡¶® object relationship ‡¶Ü‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ dependency strong ‡¶®‡¶æ

‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé parent class delete ‡¶π‡¶≤‡ßá‡¶ì child class survive ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá

4Ô∏è‚É£ Association (Uses Relationship)

Association ‡¶π‡¶≤‡ßã ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‚Äúuses‚Äù relationship ‚Äî
‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡ßã‡¶®‡ßã ownership ‡¶®‡ßá‡¶á‡•§

üëâ Example:
‚ÄúTeacher uses Whiteboard‚Äù

class Whiteboard {
  write(msg) {
    console.log("Writing:", msg);
  }
}

class Teacher {
  constructor(name) {
    this.name = name;
  }

  teach(board) {
    board.write(`${this.name} is teaching`);
  }
}

const t1 = new Teacher("Mr. Akash");
const board = new Whiteboard();
t1.teach(board);


‚úÖ ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá:

‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá temporary ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá

Dependency ‡¶ï‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá

‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡¶∞ instance maintain ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ

üî∏ Quick Comparison Table
Relationship	Example	Type	Dependency
Inheritance	Dog ‚Üí Animal	Is-A	Strong
Composition	Car ‚Üí Engine	Has-A	Strong
Aggregation	Library ‚Üí Books	Has-A	Weak
Association	Teacher ‚Üí Whiteboard	Uses	Temporary
‚öôÔ∏è When to Use What
Situation	Use
‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡¶á nature-‡¶è‡¶∞	Inheritance
‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶ü‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ strongly depend ‡¶ï‡¶∞‡ßá	Composition
‡¶Ø‡¶ñ‡¶® loosely dependent relationship ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞	Aggregation
‡¶Ø‡¶ñ‡¶® ‡¶∂‡ßÅ‡¶ß‡ßÅ temporary usage ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞	Association
üí° Best Practices

‚úÖ Inheritance ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶§‡¶ñ‡¶®‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã, ‡¶Ø‡¶ñ‡¶® ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ is-a relationship ‡¶•‡¶æ‡¶ï‡ßá
‚úÖ Composition ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã ‚Äî ‡¶è‡¶ü‡¶æ flexible ‡¶è‡¶¨‡¶Ç maintainable
‚úÖ ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï responsibility ‡¶¶‡¶ø‡¶ì ‡¶®‡¶æ (Single Responsibility Principle)
‚úÖ Public property ‡¶ï‡¶Æ ‡¶∞‡¶æ‡¶ñ‡ßã
‚úÖ Dependency minimize ‡¶ï‡¶∞‡ßã
‚úÖ Constructor ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø class ‡¶è‡¶∞ object create ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá parameter ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá pass ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã (Dependency Injection pattern)

üîß Practice Exercises

1Ô∏è‚É£ Inheritance Practice:

‡¶è‡¶ï‡¶ü‡¶æ Employee class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

‡¶è‡¶ï‡¶ü‡¶æ Manager class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì ‡¶Ø‡ßá‡¶ü‡¶æ Employee ‡¶•‡ßá‡¶ï‡ßá extend ‡¶ï‡¶∞‡¶¨‡ßá

Manager ‡¶è‡¶∞ extra property: department

method: assignTask()

2Ô∏è‚É£ Composition Practice:

‡¶è‡¶ï‡¶ü‡¶æ Battery class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

‡¶è‡¶ï‡¶ü‡¶æ Phone class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì ‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá Battery ‡¶•‡¶æ‡¶ï‡¶¨‡ßá

‡¶Ø‡¶ñ‡¶® Phone.powerOn() ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® battery charge check ‡¶ï‡¶∞‡¶¨‡ßá

3Ô∏è‚É£ Aggregation Practice:

‡¶è‡¶ï‡¶ü‡¶æ Course class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

‡¶è‡¶ï‡¶ü‡¶æ Student class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

Course ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá multiple students add ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá

4Ô∏è‚É£ Association Practice:

‡¶è‡¶ï‡¶ü‡¶æ Doctor class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

‡¶è‡¶ï‡¶ü‡¶æ Patient class ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì

Doctor.treat(patient) method ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá Doctor treating patient.name

üè† Homework (Realistic Scenario)

üîπ Problem:
‡¶è‡¶ï‡¶ü‡¶æ Hospital Management System ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ relationship ‡¶¶‡¶ø‡ßü‡ßá ‚Äî

Hospital ‚Üí has many Departments (Aggregation)

Department ‚Üí has many Doctors (Aggregation)

Doctor ‚Üí uses Patient (Association)

Doctor ‚Üí is a Person (Inheritance)

üéØ Goal:

‡¶∏‡¶¨ relationship ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá implement ‡¶ï‡¶∞‡¶¨‡ßá

Doctor class-‡¶è ‡¶è‡¶ï‡¶ü‡¶ø method ‡¶•‡¶æ‡¶ï‡¶¨‡ßá treat(patient)

Hospital class-‡¶è method ‡¶•‡¶æ‡¶ï‡¶¨‡ßá addDepartment() ‡¶è‡¶¨‡¶Ç listDepartments()